- 기본 자료형
정수를 표현하는 자료형(4가지)
byte		1byte
short		2byte
int		4byte	
long		8byte
* 자바에서는 정수값이 오면 int로 취급

실수를 표현하는 자료형(2가지)
float		4byte
double		8byte	
* 자바에서는 실수값이 오면 double로 취급
***
double로 취급하는 상황에서 float으로 바꾸려고 할 때
1. 실수값을 float변수에 저장하기 위해서는 접미사 f ex)173.8f
2. 자료형변환을 하여 저장할 수 있다 ex) (float)173.8

***
만약 정수와 정수를 연산하여 실수값을 갖기를 원한다면..
정수와 정수를 연산하면 결과가 정수가 된다
만약 정수와 정수를 연산하여 실수값을 갖기를 원한다면 
정수 중 하나를 실수로 형변환하여 연산해야 한다

문자(문자열이 아니고, 하나의 글자)를 표현하는 자료형
char		2byte	
하나의 문자열을 표현하기 위해서는 홋따옴표로..		
문자열을 위한 자료형은 String

논리를 표현하는 자료형
boolean		1byte
true,false로 표현
boolean자료형의 변수에는 
참인 상태인 true와 거짓인 상태의 false인 논리값을 저장할 수 있다
true, false값을 직접 저장할 수도 있고
어떠한 비교연산의 결과를 저장할 수도 있다

비교연산의 결과 예시 ex)
boolean flag;
flag=age>=20;

-산술연산자

+	더하기
_	빼기
*	곱하기
/	나누기 몫
%	나누기 나머지

-증감연산자
++	증가연산자
	변수자신에 더하기 1을 하여 다시 변수에 대입하는 연산자

--	감소연산자
	변수자신에 빼기 1을 하여 다시 변수에 대입하는 연산자

증감연산자는 변수명 앞에 올 수도 있고, 변수명 뒤에 올 수 있다.
증감연산자가 단독으로 쓰일때는 변수명 앞에 오거나 뒤에 오거나 결과가 같다
그러나 만약 증감연산자가 다른 연산자나 명령문에 사용이 될때에는 의미가 다르다
변수명 앞에 증감연산자가오면 먼저 변수를 증감하고 다른 연산자나 명령문을 수행한다
변수명 뒤에 증감연산자가오면 다른 연산자나 명령문을 수행하고 나중에 변수를 증감한다

ex)

int n=5;
int m=5;
n--;
--m;
System.out.println(n);
System.out.println(m);

--> n,m=4이다
단독으로 쓰였기에 상관없이 결과값이 같다

i=5;
j=5;
int k=5;
System.out.println(++i); 
System.out.println(j++);
System.out.println(k+1);

--> 순서대로 답은 656이다
증감연산자가 앞으로 오면 먼저 더해준 뒤 대입해주고,
증감연산자가 뒤로 오면 먼저 대입해 준 뒤에 더해준다

String연산

- charAt은 String의 위치(index)에 있는 문자 하나를 알려주는 기능이다
위치(index)는 0부터 시작한다
ex) String data;
data = "hello";
char last= data.charAt(4);
결과는 o가 나온다

- substring(위치 시작,위치  끝)
String first= a. substring(0,1);
a에 kid를 넣으면 k가 나온다
String first= a. substring(2,6);
a에 octopus를 넣으면 topu가 나온다
앞의 위치에 해당하는 문자는 포함하지만, 뒤의 위치에 해당하는 문자는 포함하지 않는다

for 반복문
for(int i=0 ; i< data.length() ;i=i+1){
		ch= data.charAt(i); ..........}
i가 0일 때부터 1씩 늘어나며 data의 길이만큼 반복해서 data의 한 음절씩을 내뱉게하는 반복문이다
for(){}형식으로 되어있다
()안에는 어떻게 반복할 건지를, {}안에는 무엇을 반복할 건지를 쓴다

if 조건문
if() ............. 형식으로 되어있다
if(ch=='a')
cnt=cnt+1;

위의 ch에서 a라고 일치하는 게 있으면 cnt를 1씩 올려주라는 것이다
if의 부정으로 만들고 싶은게 있다면 else를 사용할 수 있다

1byte은 8bit로 구성된다
1bit로 표현할 수 있는 수의 범위는 0,1 두 가지이다
2bit가 있다면
0 0        0
0 1        1
1 0        2
1 1        3

1byte(8개의 bit)중에 맨 왼쪽에 있는 bit는 음수인지 양수인지
판별하는 부호비트로 사용하고
나머지 7개의 비트로 숫자를 표현한다
따라서 표현할 수 있는 수의 범위가 다음과 같다
음수 2의 7승~ 양수 2의 7승-1까지 표현 가능(-128~127)
이 범위에서 벗어나 흘러넘쳐서 엉뚱하게 제일 작은 값이 나오는 현상 등을
'오버플로우'(overflow)라고 부른다
반대로 제일 큰 값이 나오는 현상 등을 '언더플로우(underflow)'라고 부른다

8진수  10진수   16진수   2진수
0 --> 0       0       0
1     1       1       1
2     2       2       10
3     3       3       11
4     4       4       100
5     5       5       101
6     6       6       110
7     7       7       111
10    8       8       1000
11    9       9       1001
12    10      A       1010 
13    11      B       1011
14    12      C       1100
       13      D       1101
       14      E       1110
       15      F       1111
       16      10      10000
       17      11      10001
  
***표현 방법
8진법은 0
16진법은 0x
2진법은 0b
라고 앞에 붙여 표현한다

 
1.0E6:  1.0 곱하기 10의 6승을 의미합니다
1.0E-6: 1.0곱하기 10의 -6승을 의미합니다


=은 대입을 위한 연산자이고
==은 같은지 비교하는 연산자이다

**각 자리수 나타내기, 몇의 배수가 맞는지 확인하기 등에 나누기/, 나머지% 연산자를 활용할 수 있다
각 자리 수 나타내기는 나누기와 나머지 연산자를 이용
몇의 배수가 맞는지는 몇으로 나눈 나머지가 0인지를 이용
