-char와 int

char는 원래 하나의 문자를 저장하기 위한 자료형 입니다.
그런데 char를 갖고 작은 수의 정수를 표현할 수도 있어요!

또, char를 문자를 저장하고 
그것을 int로 형변환을 하면 그 문자에 대한 정수값을 가져 올 수 있어요.

각문자 마다 정해진 정수값이 있습니다. 
그것을 "아스키코드값"이라고 합니다.

대문자 'A'의 아스키 코드값은 65입니다.
그 다음 문자들은 1씩 증가합니다.

소문자 'a'의 아스키코드값은 97입니다

char ch = 'A';
라고 하고 
System.out.println(ch)
라고 하면 'A'가 출력 됩니다. 

그런데 만약 다음과 같이 수식을 표현하면
System.out.println(ch+1)

위와같이 수식을 만나면
ch를 정수로 변환하여 연산을 합니다.
즉 화면에 'A'의 아스키코드값이 65+1의 결과인 66이 출력이 됩니다.

또, 다음과 같이 표현하면
System.out.println(  (char)(ch+1)  )

연산한 결과 66의 문자인 'B'가 출력이 됩니다.

만약 다음과같이 문자이 있다면
int k = 65;
System.out.println( (char)k );
아스키코드값 65에 해당하는 문자 'A'가 출력이 됩니다.



-객체와 클래스

클래스 : 
자바가 제공하는 기본자료형 만으로는 프로그램 하기가 어려울때에 
사용자가 직접 자료형을 만들 수 있습니다.
또, 기본자료형을 여러개 모아서 하나의 세트를 만들어야 하는 경우가 있습니다.
이러할 때에 사용자는 클래스를 만들어 사용할 수 있어요.

즉, 클래스란 "사용자 정의 자료형"이라고 말할 수 있어요!

클래스는 여러가지 변수들과 메소드들로 구성될 수 있습니다.

class Student
{
String name;
int kor;
int eng;
int math;
int tot;
double avg;
}

class StudentTest01 
{
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int n;
n = 100;
//기본자료형 변수는 선언하고 값을 바로 저장할 수 있어요!

Student s;
//그러나 참조자료형인 객체참조변수는 선언하고 바로 값을 저장할 수 없어요!
s.name = "홍길동";

//사용하려면
//반드시 객체참조변수를 통해서 new연산자를 이용하여 객체를 생성하고 사용할수 있어요
s = new Student();
//라고 하고 s를 통해서 맴버변수를 사용할 수 있습니다.
s.name = "홍길동";


//다음의 객체를 참조하는 배열의 경우를 봅시다.
Student [] arr = new Student[5];

//위의 문장은 Student의 객체를 생성한 것이 아니라
//Student의 객체를 참조할 수 있는 배열을 5개 만든 것입니다.

//위의문장은 마치
//Student의 변수 5개만 만든 것이라고 보면 됩니다.
Student arr1;
Student arr2;
Student arr3;
Student arr4;
Student arr5;

//Student 변수 5개를 만든 것입니다.

//따라서
arr[0].name = "홍길동";
//이라고 바로 사용 할 수 없으며
arr[0] = new Student();
//라고 객체를 생성한 후 사용할 수 있어요!



}
}

------------------------------------------------------
객체지향 프로그래밍
==> Object Oriented Programming (OOP)

==> 현실세계의 모든 것을 객체화 할 수 있다.
내가 눈으로 볼 수 있는 것일 수도 있고 
눈에 보이지 않는 개념적인 것일 수도 있어요.

객체라고 하는 것은 
이 세상에서 단 하나 밖에 없는 유일 한 것 입니다.

그 객체들은 
객체를 구성하기 위한 
여러가지 속성들로 구성되어 있어요.
또, 어떠한 객체들을 기능을 할 수도 있어요!

그 객체 마땅한 
속성을 요구해야 하고 
기능을 요구해야 합니다.

이러한 객체를 만들기 위해서는 
그 객체를 표현하기 위한 틀을 만들어하는데 
그것을 "클래스"라고 합니다.


따라서 클래스란
객체를 표현하기 위한 틀이며
사용자자 새롭게 만드는 "자료형"으로 생각하세요!

클래스는 자료형입니다!
클래스는 자료형입니다!



class Student{
어쩌구 저쩌구...
}


int n;
Student s;

위의 두문장은 수준이 같아요.
n도 변수명이고 s도 변수명입니다.
int도 자료형이고 Student도 자료형입니다.

--------------------------------------------------------------

건우가 손에 아이폰을 들고 이스트백을 메고 은행에 들어갑니다.


건우,
아이폰,
이스트백,
은행,
손?

위의 현상에서 
손은 건우의 손이고
든다, 멘다, 들어간다는 건우 하는 동작입니다.

"건우"라는 객체를 만들기 위해서는
"사람"이라는 클래스를 먼저 만들어야 하는 
위의 현상을 표현하기 위해서는 
사람이라는 클래스를 만들때에 
"손"이른 속성과 
"든다","멘다","들어간다"라는 동작을 만들어야 합니다.

따라서
클래스를 만들때에는
내가 표현해야 하는 객체에 대하여 
"속성"과 "동작"을 먼저 분석하여 
설계해야 합니다.
"속성"을 "맴버변수"라 하고 
"동작"을 "맴버메소드"라고 합니다.

-----------------------------------------------------------

사람	Person
속성
이름	String name	"홍길동"
나이	int age		20
성별	char gender	'남','여'


동작
먹는다	void eat(String food)
잔다		void sleep()










연습) 사각형을 나타내는 Rectangle 클래스를 만들어봅니다.
Rectangle클래스는 가로길이와 세로길이를 속성으로 갖도록 합니다.
또 사각형의 넓이를 계산하여 반환하는 메소드를 갖도록 합니다.
Rectangle 클래스와 Rectangle을 이용하는 RectangleTest를 만들어 봅니다.

완성하면 "1"




----------------------------------------------------------

객체지향 프로그래밍의 특징
1) 은닉성(Encapsulation)
그 객체를 구성하고 있는 속성들을 
대체로 외부에 노출하지 않도록 만들어야 해요!

권한이 있는 메소드 만이 속성에 접근하도록 
만드는 것이 일반적이요!

그렇다고 모든 속성과 동작을 전부다 
감추어 놓으면 이 클래스 자체를 사용할 수 없어요.

그래서, 어떤것은 감추어요
어떤것 아무나 다 사용하세요.
라고 하는 "접근명시자"가 있어요.

** 접근명시자의 종류는 
private과 
public이 있습니다.

private은 외부로 노출하지 않을 때 사용합니다.
public은 아무나 다 사용해도 좋을때 사용합니다.


일반적으로 클래스를 만들때에
속성인 맴버변수들은 private에 두고
동작인 맴버메소드들은 public에 두어서 만들어요!

그래서, 
private에 있는 맴버변수에 직접 접근 할 수 없고 
접근하는 메소드를 만들어 둡니다.

접근해서 맴버에 값을 변경하는 메소드는 
setXXX()로 만들고				==> setter   설정자

접근해서 맴버에 값을 읽어오는 메소드는
getXXX()로 만드는 것이 일반적입니다.
==> getter   접근자
