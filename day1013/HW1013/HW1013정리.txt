재귀호출?
재귀 호출(recursive call)이란 함수 내부에서 함수가 자기 자신을 또다시 호출하는 행위를 의미한다.
이러한 재귀 호출은 자기가 자신을 계속해서 호출하므로, 끝없이 반복되게 된다.
따라서 함수 내에 재귀 호출을 중단하도록 조건이 변경될 명령문을 반드시 포함해야 한다.
예시를 들어보자면,
static void printHelloInfinite() {
    System.out.println("hello");
    printHelloInfinite();
}

public static void main(String[] args) {
    printHelloInfinite();
}

를 하면 hello가 무한히 출력된다

static void printHello(int endNum) {
    if (endNum > 0) {
        System.out.println("hello " + endNum);
        printHello(endNum-1);
    }
}

public static void main(String[] args) {
    printHello(5);
}

를 하면 hello5부터 hello1까지 출력된다

또한 함수 내에서 함수를 재귀호출하면 같은 메모리 내에서 처음으로 돌아가지 않는다
함수를 재귀호출 할때마다 새로운 메모리가 잡혀서 처음부터 돌아간다


기본생성자
아무 생성자도 만들지 않으면 기본생성자가 자동으로 만들어진다
만약 사용자가 어떤 생성자를 만들었다면 기본생성자는 만들어지지 않는다
그러니 만약 사용자가 어떠한 생성자를 만들었다면, 기본 생성자 또한 만들어주는 것이 필요하다

static 키워드
모든객체가 공동으로 사용할 기억공간
객체와 무관하게 사용할 기억공간으로 객체가 없이도 사용가능하다

static 변수(클래스 변수)
클래스 이름으로 static 변수에 접근 가능
staitc변수는 객체를 생성하지 않고 사용할 수 있다 

static 함수(클래스 메소드)
클래스 이름으로 static 함수에 접근 가능
static 함수는 static 변수만을 담을 수 있다
static이 아닌 변수를 담으면 오류가 난다
클래스의 매개변수가 하나도 없을 때는 static 메소드로 프로그램을 짜는 것이 좋다

==> 클래스를 만들 때에 멤버변수나 메소드를 객체와 무관하게
객체 없이도 사용하게 하려면 변수명 앞에, 클래스 앞에 static
키워드를 붙인다. 이러한 변수를 클래스 변수, 메소드를 클래스 메소드라고 하며
클래스명으로 사용하여 호출할 수 있다. 또 객체가 있다면 객체를 통해서 호출가능하다
static 메소드 안에서는 static 변수 혹은 또다른 static 메소드만 사용가능하다

어떤 클래스가 속성(멤버변수)가 없고 
메소드 만으로 구성이 될 때에는
객체를 생성할 필요가 없다
그래서 이때에는 static 메소드로 만드는 것이 좋다


메소드 오버로딩 
생성자를 중복하여 정의하듯 같은 이름의 메소드를 여러 개 중복하여 정의
같은 이름의 메소드를 중복하여 정의할 수 있는 조건?
==> 매개변수의 자료형,개수,순서가 달라야 한다

값에 의한 호출(Call by Value)
- 메소드 호출시에 전달되는 매개변수가 기본자료형인 경우를 Call by Value라고 한다
==> 값에 의한 호출은 메소드 호출시에 전달하는 매개변수의 값을 메소드 호출당하는 쪽에서
그 값을 복사해서 새로운 메모리가 확보된다.
즉, 매개변수와 매개변수를 복사한 값의 둘의 주소값이 다르다는 것이다.

그래서 만약 메소드 안에서 매개변수의 내용을 바꾸더라도 서로 다른 메모리이기 때문에
호출한 쪽에서는 변경한 내용이 적용되지 않는다


참조에 의한 호출(Call by reference)
- 메소드 호출시에 전달되는 매개변수가 배열참조변수이거나 객체참조변수인 경우를 Call by Reference라고 한다
==> 참조에 의한 호출은 메소드 호출시에 전달되는 것이 값이 아니라
참조하고 있는 배열의 주소이거나 참조하고 있는 객체의 주소가 메소드에게 전달된다
따라서 메소드 안에서 참조하는 객체와 메소드 호출하는 쪽에서 참조하는 객체가 서로
동일하다

그래서 만약 메소드 안에서 참조하는 객체나 배열의 내용이 변경 될때에
메소드 호출한 쪽에서도 변경된 내용이 적용된다
