-for문의 형식

for( 초기값 ; 조건식  ; 증감식 ){
	반복실행시킬 명령어(들)
}

일반적으로 위와 같이 
for괄호안에 세미콜론을 두개 적어 주고 
왼쪽에 반복시킬 조건식의 초기값, 가운데에 조건식, 맨 오른쪽에 증감식을 
써준다

그런데,
for 괄호안에 세미콜론만 두개오고 
초기값,조건식,증감식이 없어도 
문장이 성립한다.

예를 들어보자

for(;;){
	System.out.println("hello");
}
이 코드는
정상적으로 동작한다.
이 코드는 초기값, 조건식, 증감식이 없기에 
늘(언제라도) 참이 되는 구조다. 
따라서 위의 코드는 "hello"을 화면에 끝없이 출력한다.


for(;;){

}

위의 구조를 사용하여
즉, 세미콜론 왼쪽에 초기값, 가운데에 조건식, 맨 오른쪽에 증감식을 두지 않고 
위의 구조를 따르면서 
for문이 오기전에 초기값을 두고, 
증감식과 조건식을 for문 속에 두어 
반복할 횟수를 정할 수 있다.

int i=1;
for(;;){
	System.out.println("hello");
	if(i >= 3){
		break;
	}
	i++;
}

위와 같이 for문 오기전에 초기값을 주고
for문 속에서 조건식과 증감식을 주어 
반복 시킬 횟수를 정할 수 있다.



-while 문의 형식


초기값
while(조건식){
	반복실행시킬 명령어(들)
	증감식
}

연습) 사용자 한테 N을 입력받아 N!을 구하여 출력하는 프로그램을 
		while문을 이용하여 작성 해 봅니다.

< 실행 예 >
N을 입력하세요==> 5
5*4*3*2*1=___

코드는 이러하다
import java.util.Scanner;
class InputN 
{
	public static void main(String[] args) 
	{ Scanner sc= new Scanner(System.in);
	  int n,sum=1;
		System.out.print("N을 입력하세요==> ");
		n= sc.nextInt();
		int i=n;
		while(i>=1){
			System.out.print(i);//i를 출력한다
			if(i!=1){
				System.out.print("*");//곱하기를 출력한다
			}
			sum*=i;//sum=sum*i(팩토리얼 식 생성)
			i--;
		}
        System.out.println("="+sum);
	}
}




-do while 문의 형식

초기값;
do{
	반복 수행할 명령어(들);
	증감식;
}while(조건식);

연습) 반복문을 이용하여 다음과 같이 동작하는 프로그램을 
		작성해 봅니다. (for,while,do~while)

< 실행 예 >
N을 입력하세요==> 5
*
**
***
****
*****

실행 코드는 이러하다
import java.util.Scanner;
class Practice3 
{
	public static void main(String[] args) 
	{ Scanner sc= new Scanner(System.in);
	  System.out.print("N을 입력하세요==> ");
	  int n;
	  n= sc.nextInt();
		int i,j;
		i=1;
        do{
		 j=1;//중첩 반복문!! 
		 do{
			System.out.printf("*");
			j++;
		 }while(j<=i);//첫줄에 j가 한 번, 두번째 줄에 j가 두 번 작동해야 하니 줄 수인 i보다 작아야한다
		 System.out.printf("\n");//줄 수인 i가 해야할 일, 조건에 적합할 때마다 줄을 바꿔준다
         i++;
        }while(i<=n);
	}
}





-while VS do~while

while문과 do~while문은 사용하는 방법이 유사한데
차이점은 만약에 처음부터 조건을 만족하지 않은 상황이라면


while문은 반복문을 한번도 실행하지 않을 수 있지만 
조건을 나중에 비교하는 do~while은 어찌되었던 do문을 적어도 한번은 
실행한다.

int i=100;
while(i<=3){
	System.out.println("hello");
	i++;
}

위의 코드는 처음부터 조건을 만족하지 않은 값으로 초기화 되어 있으므로 
반복문을 한번도 동작하지 않는다.

그러나 다음은 
int i=100;
do{
	System.out.println("hello");
	i++;
}while(i<=3);

위의 코드는 
처음부터 조건을 만족하지 않은 값으로 초기화 되어 있으나 
조건식을 나중에 가서 판별하므로 
어찌 되었떤 do문을 한번은 실행한다.



반복문이 세가지(for,while,do~whiel)나 있는데
어떨때 어떤것을 사용하는 것이 좋은가요?

--> 반드시 이럴때는 이것을 써요!라고 정해진 것은 없다.
자유롭게 아무거나 써도 좋다.

그러나 일반적으로 
반복실행을 해야할 횟수가 딱 정해진 경우에는 
for를 많이 쓴다
사용자의 입력값(혹은 조건이) 만족할 동안 
계속해서 동작해야 하는 경우에는 
while 이나 do~while문을 사용하는 것이 좋다.

그리고 일단 한번 동작해야 하는 경우라면
do~while문을 이용하는 것이 좋다.



-반복문을 이용하여 제대로 된 값을 입력할 때 까지 입력 받기

for(;;){
	System.out.print("월을 입력하세요==>");
	month = sc.nextInt();       
	if(  month >=1 && month <= 12  ){//정확한 값이 들어오면 월 입력하라는 반복을 멈추고 break로 반복문을 탈출한다 
		break;
	}
}
----------------------------------------------------------
while(true){
	System.out.print("월을 입력하세요==>");
	month = sc.nextInt();       
	if(  month >=1 && month <= 12  ){
		break;
	}
}
----------------------------------------------------------
do{
	System.out.print("월을 입력하세요==>");
	month = sc.nextInt();       
	if(  month >=1 && month <= 12  ){
		break;
	}
}while(true);



-배열의 요소 만큼 반복 실행하기

int []data = {10,20,30,40,50};

위와 같은 배열의 요소만큼 반복 실행하기 위해서는 
다음과같이 반복문을 사용한다.

for(int i=0; i<data.length; i++){
	System.out.println(data[i]);
}

-----------------------------------------
int i=0;
while(i<data.length){
	System.out.println(data[i]);
	i++;
}

------------------------------------------

int i=0;
do{
	System.out.println(data[i]);
	i++;
}while(i<data.length);

위와같은 반복문(for,while,do~while)을 사용하여 
배열의 인덱스 만큼 증가시켜
배열의 요소에 접근할 수 있다!


그런데, 자바에서 배열의 요소만큼 반복 실행하기 위한 
	향상된 반복문(for-each)을 제공한다.

	for-each 반복문은 배열의 요소만큼 반복 실행시키기 위하여 
	사용하며 사용하는 방법은 다음과 같다.


<< for each 반복문의 형식 >>

for(  자료형 변수명 :  배열이름 ){
	반복실행시킬 명령어(들)
}

for 괄호안에 콜론(:)이 오고 콜론 오른쪽에는 배열이름을 써 준다.
콜론 왼쪽에 배열의 요소를 하나씩 꺼집어 내어올 변수이름을 자료형과 함께 써준다.
즉, 배열의요소를 차례로 꺼내와서 변수에 담기게 된다
하나씩 꺼집어 내어와서 담을 변수의 자료형은 배열의 자료형과 일치되게 써야 한다.

int []kor = {10,20,30,40,50}

위의 배열의 요소만큼 반복 실행시키는 명령를 for each로 표현한다면 
이러하다.

for( int v : kor){//kor 배열의 자료형이 int이기에 변수명 v의 자료형에도 int가 왔다
	System.out.print(   ) ;
}

-data.length와 data.length()의 차이점 (소괄호의 유무에 따른)

data.length는 클래스의 멤버변수

data.length()는 클래스의 멤버함수

-break는 탈출할 때 자신과 가장 가까이에 있는 반복문 1개에서 탈출한다
즉, 여러 반복문이 중첩되있고 그걸 다 나가고 싶을 경우, break를 여러 번 써줘야 한다!

